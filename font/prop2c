#! /usr/bin/perl

use strict;
use warnings;

# Print a property in C syntax.

my %prop = ();

sub read_prop($)
{
    my ($basefn) = @_;

    my $f;
    if ($basefn eq '-') {
        $f = *STDIN;
    }
    else {
        my $UNICODE = $ENV{UNICODE};
        my $fn;
        $fn = $basefn;
        unless (-f $fn) {
            die "Error: Expected $UNICODE directory containing '$basefn' not set.\n".
               "    Possibly download from www.unicode.org and set enviroment variable.\n"
                unless $UNICODE;
            $fn = "$UNICODE/$basefn";
            $fn = "$UNICODE/".lc($basefn) unless -f $fn;
        }
        open ($f, '<', $fn) or
            die "Error: Unable to open '$fn': $@\n";
    }
    LINE: while (<$f>) {
        s/#.*//;
        s/^\s+//;
        s/\s+$//;
        next LINE if /^$/;
        if (/^([0-9A-Fa-f]+)(?:\s*\.\.\s*([0-9A-Fa-f]+))?\s*;\s*(\S+)$/) {
            my ($first, $last, $name) = ($1,$2,$3);
            for my $c (hex($first)..hex($last // $first)) {
                $prop{$name}{$c} = 1;
            }
        }
        else {
            die "Error: In '$basefn': Unable to parse line: $_\n";
        }
    }
}

sub find_prop($)
{
    my ($name) = @_;
    my $prop = $prop{$name};
    if ($prop) {
        return $prop;
    }
    die "Error: Unknown property or unrecognised character range (upper case): '$name'\n";
}

# process command line to derive property

my %set = ();
my $have_value = 0;
for my $arg (@ARGV) {
    if ($arg =~ /^[+]([^=]+)(?:=(.*))?$/) {
        my ($key,$value) = ($1,$2);
        $have_value |= defined $value;
        my $prop = find_prop($key);
        for my $c (keys %$prop) {
            if (defined $set{$c}) {
                $set{$c} .= " | $value";
            }
            else {
                $set{$c} = $value;
            }
        }
    }
    else {
        read_prop($arg);
    }
}

# write

print "/* -*- Mode: C -*- */\n";
my $first = undef;
my $last = undef;
for my $e ((sort { $a <=> $b } keys %set), undef) {
    if (!defined $e ||
        (defined $last &&
            (
                ($e != ($last + 1)) ||
                ($set{$e} ne $set{$first})
            )
        ))
    {
        printf "    { 0x%06X, 0x%06X", $first, $last;
        if ($have_value) {
            printf ", $set{$first}";
        }
        printf " },\n";
        $first = $last = $e;
    }
    $first = $e unless defined $first;
    $last = $e;
}
